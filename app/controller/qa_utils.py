import logging
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI

def user_input(user_question, vector_store):
    """
    Processes user input, performs a similarity search, and generates a response
    using a question-answering model.

    Args:
    - user_question (str): Question asked by the user.
    - vector_store (FAISS): Vector store containing embeddings of text chunks.

    Returns:
    - str: Answer generated by the question-answering model in response to the
      user's question. If the answer is not found in the document or an error occurs,
      an appropriate message is returned.

    Note:
    This function uses Google Generative AI for question answering.
    """
    prompt_template = """
    You are an AI assistant that provides helpful answers to user queries.\n\n
    Context:\n {context}?\n
    Question: \n{question}\n

    Answer: 
    """
    model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)

    search = vector_store.similarity_search(user_question)
    response = chain({"input_documents": search, "question": user_question}, return_only_outputs=True)

    if response:
        answer_text = response['output_text']
        logging.info(f"\nQuestion: {user_question}\n")
        logging.info(f"\nAnswer: {answer_text}\n")
    else:
        answer_text = "Not found in document."
        logging.warning(f"Question: {user_question}, Answer: {answer_text}")

    return clean_text(answer_text)

def clean_text(output_text):
    """
    Cleans and formats the output text for readability.

    Args:
    - output_text (str): Text to be cleaned and formatted.

    Returns:
    - str: Cleaned and formatted text.
    """
    cleaned_text = output_text.strip()
    cleaned_text = '\n'.join(line for line in cleaned_text.splitlines() if line.strip())
    return cleaned_text
